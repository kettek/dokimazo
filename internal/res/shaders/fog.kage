package main

//kage:unit pixels

var Time float
var Position vec2
var Zoom float
var Rotation float
var Color vec4

func hash(p vec2) vec2 {
  p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) )
	return -1.0 + 2.0*fract(sin(p)*43758.5453123)
}

func noise(p vec2) float {
  K1 := 0.366025404 // (sqrt(3)-1)/2
  K2 := 0.211324865 // (3-sqrt(3))/6
  
  var i, a, o, b, c vec2
  var h, n vec3
  var m float

  i = floor( p + (p.x+p.y)*K1 )
  a = p - i + (i.x+i.y)*K2
  m = step(a.y,a.x) 
  o = vec2(m,1.0-m)
  b = a - o + K2
	c = a - 1.0 + 2.0*K2
  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 )
	n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)))
  return dot( n, vec3(70.0) )
}

func rotate(angle float) mat2 {
  c := cos(angle)
  s := sin(angle)
  return mat2(c, -s, s, c)
}

func Fragment(dstPos vec4, srcPos vec2, color vec4) vec4 {
  f := 0.0

  size := imageSrc0Size()
  
  uv := srcPos.xy

  uv -= size/2
  uv /= Zoom
  uv *= rotate(Rotation)
  uv += size/2
  
  t := Time
  
  uv += t + Position
  uv /= size
  
  var m mat2
  m = mat2(2.6, 1.2, -1.2, 2.6)
  f = 0.5000*noise(uv)
  uv = m * uv
  f += 0.2500*noise(uv)
  uv = m * uv
  f += 0.1250*noise(uv)
  uv = m * uv
  f += 0.0625*noise(uv)
  uv = m * uv
  
  f = 0.5 + 0.5*f

  f *= smoothstep(0.0, 0.005, abs(dstPos.x-0.6))

  return vec4(f*Color.r*Color.a, f*Color.g*Color.a, f*Color.b*Color.a, f*Color.a)
}